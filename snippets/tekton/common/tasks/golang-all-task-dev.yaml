apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: golang-all-dev
spec:
  params:
  - name: message
    description: The message to print
    default: This is the default message
    type: string
  - name: repo-name
    description: The name of the repo
    type: string
  - name: repo-hash
    description: The commit hash of the repo
    type: string
  - name: actor-name
    description: The actor
    type: string
  - name: actor-email
    description: The actors email
    type: string
  - name: uid
    description: Unique id
    type: string
  - name: sonar-url
    description: The sonar url
    type: string
  - name: argocd-repo-name
    description: The argocd repe
    type: string

  workspaces:
    - name: shared-workspace

  resources:
    inputs:
    - name: $(params.repo-name)
      type: git
    - name: $(params.argocd-repo-name)
      type: git

  steps: 
  - name: info
    image: bash
    command: ["bash", "-c"]
    args: ["echo -e 'Pipeline run project : $(params.repo-name)\ncommit hash :  $(params.repo-hash)\nuser info : $(params.actor-name) : $(params.actor-email)\nunique id : $(params.uid)'"]
 
  - name: list-dir
    image: bash
    workingDir: /workspace/$(params.repo-name)
    command: ["bash", "-c"]
    args: ["ls -la"]
  
  - name: run-clean
    image: docker.io/lzuccarelli/golang-base:1.15.3-dev
    workingDir: /workspace/$(params.repo-name)
    command: ["make"]
    args: ["clean"]

  - name: run-test
    image: docker.io/lzuccarelli/golang-base:1.15.3-dev
    workingDir: /workspace/$(params.repo-name)
    securityContext:
      runAsUser: 0
    command: ["make"]
    args: ["test"]
  
  - name: run-cover
    image: docker.io/lzuccarelli/golang-base:1.15.3-dev
    workingDir: /workspace/$(params.repo-name)
    securityContext:
      runAsUser: 0
    command: ["make"]
    args: ["cover"]

  - name: run-build
    image: docker.io/lzuccarelli/golang-base:1.15.3-dev
    workingDir: /workspace/$(params.repo-name)
    securityContext:
      runAsUser: 0
    command: ["make"]
    args: ["build"]

  - name: sonar-scanner
    image: docker.io/lzuccarelli/cicd-utilities:1.0.1
    workingDir: /workspace/$(params.repo-name)
    securityContext:
      runAsUser: 0
    script: |
        #!/bin/bash
        echo -e "Sonarqube scanning project"
        ls -la
        FS=$(stat --printf='%s\n' output.json)
        LOGIN=$(echo $(params.sonar-login) | base64 -di)
        PWD=$(echo $(params.sonar-pwd) | base64 -di)
        SONARURL=$(params.sonar-url)
        REPO=$(params.repo-name)
        echo -e "Project : ${REPO}"
        echo -e "SonarQube url : ${SONARURL}"
        sonar-scanner -Dsonar -Dsonar.login=${LOGIN} -Dsonar.password=${PWD} | tee results.txt 
        EXECUTION=$(cat results.txt | grep -o "EXECUTION SUCCESS")
        if [ "${EXECUTION}" = "EXECUTION SUCCESS" ]
        then
          echo "PASSED EXECUTION"        
          curl -H 'Content-Type: application/json' -H 'Accept: application/json' -H 'Authorization: Basic YWRtaW46Yml0bmFtaQ=='  "${SONARURL}/api/qualitygates/project_status?projectKey=${REPO}" > result.json;
          RESULT=$(cat result.json | jq '.projectStatus.status');
          echo ${RESULT} | grep -o "OK" && echo "PASSED" && exit 0 || echo "FAILED" && exit 1
        else
          echo "FAILED EXECUTION"
          exit 1
        fi

  - name: build-and-push
    workingDir: /workspace/$(params.repo-name)
    image:  gcr.io/kaniko-project/executor@sha256:b9eec410fa32cd77cdb7685c70f86a96debb8b087e77e63d7fe37eaadb178709
    command: ["/kaniko/executor"]
    args: ["--dockerfile=/workspace/$(params.repo-name)/Dockerfile","--context=/workspace/$(params.repo-name)/","--destination=quay.io/14west/$(params.repo-name):$(params.repo-hash)"]
    securityContext:
      runAsUser: 0
    volumeMounts:
    - name: docker-config
      mountPath: /kaniko/.docker
  volumes:
  - name: docker-config
    configMap:
      name: docker-config

  - name: update-argocd
    workingDir: /workspace/$(params.argocd-repo-name)
    image: docker.io/lzuccarelli/cicd-utilities:1.0.1
    securityContext:
      runAsUser: 0
    script: |
        #!/bin/bash
        echo -e "Patching image and version"
        sed -i '/image:/c\          image: docker.io/lzuccarelli/$(params.repo-name):$(params.repo-hash)' manifests/apps/$(params.repo-name)/base/deployment-config.yaml
        sed -i '/VERSION/!b;n;c\              value: "$(params.repo-hash)"' manifests/apps/$(params.repo-name)/base/deployment-config.yaml
	
        rev=$(git log -1 --pretty=format:'%H' | xargs)

        git config user.email "$(params.actor-email)"
        git config user.name "$(params.actor-name)"
        
        # for tracing purposes
        git diff
        # commit the change
        git add . 
        git commit -m "$(params.message)"
        git push -v --set-upstream origin master
